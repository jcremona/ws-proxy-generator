#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{xcolor}
\usepackage{forest}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Trabajo Final
\end_layout

\begin_layout Author
Javier Cremona
\end_layout

\begin_layout Section
Descripción del proyecto
\end_layout

\begin_layout Standard
A partir del auge de Internet, surgió la necesidad de la comunicación de
 datos entre aplicaciones corriendo en distintas plataformas.
 En este contexto, un 
\series bold
servicio web
\series default
 permite a una aplicación consumir datos desde otra aplicación, independientemen
te del lenguaje en el que estén desarrolladas o de la plataforma en la que
 corran.
 Nótese que difiere de una aplicación web, la cual está pensada para ser
 consumida por un usuario.
\end_layout

\begin_layout Standard
Una de las implementaciones más comunes de un servicio web es mediante la
 aplicación del protocolo SOAP.
 Si bien está cayendo en desuso, muchas aplicaciones siguen utilizando esta
 metodología hoy en día.
 
\series bold
SOAP
\series default
 es un protocolo estándar de comunicación que define el intercambio de mensajes
 entre dos objetos en distintos procesos, basado en XML.
 Generalmente, SOAP se utiliza sobre el protocolo de aplicación HTTP, aprovechán
dose del masivo uso del mismo, y de que es soportado por todos los navegadores
 y servidores.
 Un mensaje SOAP está compuesto por cabeceras (
\emph on
headers
\emph default
) y un cuerpo de mensaje (
\emph on
body
\emph default
), de forma similar a HTTP.
\end_layout

\begin_layout Standard
Este tipo de servicios suele exportar un documento escrito en un lenguaje
 de descripción conocido como WSDL.
 Un documento 
\series bold
WSDL 
\series default
proporciona al cliente la información necesaria para interactuar con el
 servicio web.
 WSDL define una gramática XML que describe los servicios de red como coleccione
s de puntos finales (
\emph on
endpoints
\emph default
) capaces de intercambiar mensajes (NdR: en la carpeta test se adjuntan
 varios ejemplos de documentos WSDL).
 Además sirve como interfaz del servicio, permitiendo definir operaciones
 mediante abstracciones de los elementos típicos de los lenguajes de programació
n de propósito general, tales como métodos y tipos.
\end_layout

\begin_layout Standard
El presente proyecto tiene como objetivo automatizar varios de los pasos
 necesarios para consumir un servicio web mediante la creación de un cliente
 Haskell.
 El programa recibe como entrada un documento WSDL, y su salida son módulos
 Haskell con funciones que permiten consumir el servicio web en cuestión.
 Estas funciones sólo requieren que se le pasen los valores como parámetros
 y, al ser ejecutadas, retornan la salida del servicio web.
 En principio, estas funciones solamente toman records como argumento, cuyos
 campos son tipos primitivos.
 Los módulos generados importan un módulo ya predefinido (codeado con anteriorid
ad), el cual expone el método que se encarga de la comunicación propiamente
 dicha: creación del mensaje XML, empaquetamiento en un mensaje HTTP, y
 envío del mensaje mediante un POST request de HTTP.
 Además este módulo expone otras funciones útiles a usar en runtime.
\end_layout

\begin_layout Subsection
Limitaciones
\end_layout

\begin_layout Standard
El proyecto presenta ciertas limitaciones, en el sentido de que no acepta
 cualquier documento WSDL como entrada.
 Debido a la gran flexibilidad que tiene el lenguaje WSDL, se decidió que
 el programa sólo acepte un subconjunto de todos los documentos WSDL posibles.
 
\end_layout

\begin_layout Standard
Existen cuatro tipos diferentes de estilos (
\emph on
styles
\emph default
) para definir un documento WSDL:
\end_layout

\begin_layout Enumerate
RPC/Encoded
\end_layout

\begin_layout Enumerate
RPC/Literal
\end_layout

\begin_layout Enumerate
Document/Encoded
\end_layout

\begin_layout Enumerate
Document/Literal
\end_layout

\begin_layout Standard
La diferencia principal radica en la forma en la que se construye el cuerpo
 del mensaje SOAP.
 El estilo Document permite que el cuerpo sea cualquier instancia XML, mientras
 que el estilo RPC requiere que el mensaje contenga un formato particular,
 en el que aparece el nombre del método en cuestión y un conjunto de parámetros.
 Por otro lado, el estilo Literal implica que el cuerpo del mensaje se define
 conforme a un XML Schema (lenguaje utilizado para describir bloques XML,
 indicando tipos de datos y restricciones que debe cumplir una instancia
 de XML), mientras que el estilo Encoded no tiene esta restricción, si bien
 utiliza tipos de datos del lenguaje XML Schema.
 Para este proyecto se decidió que el programa sólo acepte documentos WSDL
 definidos mediante el estilo 
\series bold
RPC/Literal
\series default
.
\end_layout

\begin_layout Standard
Otra de las limitaciones es que los métodos permitidos en los documentos
 WSDL deben admitir al menos un parámetro de entrada y de salida.
\end_layout

\begin_layout Section
Instalación y uso
\end_layout

\begin_layout Subsection
Dependencias
\end_layout

\begin_layout Standard
Los siguientes paquetes son necesarios para la ejecución de este proyecto.
 Se pueden instalar mediante cabal.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "exceptions"
target "http://hackage.haskell.org/package/exceptions"
literal "false"

\end_inset

 (>= 0.10.0)
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "conduit"
target "http://hackage.haskell.org/package/conduit"
literal "false"

\end_inset

 (>= 1.3.0.3)
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "xml-types"
target "http://hackage.haskell.org/package/xml-types"
literal "false"

\end_inset

 (>= 0.3.6)
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "network-uri"
target "http://hackage.haskell.org/package/network-uri"
literal "false"

\end_inset

 (>= 2.6.1.0)
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "xml-conduit"
target "http://hackage.haskell.org/package/xml-conduit"
literal "false"

\end_inset

 (>= 1.8.0)
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "prettyprinter"
target "http://hackage.haskell.org/package/prettyprinter"
literal "false"

\end_inset

 (>= 1.2.1)
\end_layout

\begin_layout Subsection
Instalación
\end_layout

\begin_layout Enumerate
Clonar el proyecto:
\begin_inset listings
lstparams "language=bash,basicstyle={\small\ttfamily},breaklines=true,backgroundcolor={\color{lightgray}}"
inline false
status open

\begin_layout Plain Layout

git clone https://github.com/jcremona/ws-proxy-generator.git
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Ir a la carpeta src:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=bash,basicstyle={\small\ttfamily},backgroundcolor={\color{lightgray}}"
inline false
status open

\begin_layout Plain Layout

cd ws-proxy-generator/src
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Compilar:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=bash,basicstyle={\small\ttfamily},backgroundcolor={\color{lightgray}}"
inline false
status open

\begin_layout Plain Layout

ghc Main.hs
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Correr el programa con la URL de un documento WSDL como parámetro:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=bash,basicstyle={\small\ttfamily},backgroundcolor={\color{lightgray}}"
inline false
status open

\begin_layout Plain Layout

./Main http://localhost:9999/ws/hello?wsdl
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Si todo funcionó correctamente, aparecerá el nombre del módulo generado,
 en nuestro caso HelloWorld.hs.
 Para utilizar este módulo es necesario hacerlo en el mismo directorio en
 el que se encuentre el módulo Callws.hs, ya que el código generado importa
 este módulo.
\end_layout

\begin_layout Enumerate
Utilizamos el módulo generado:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=bash,basicstyle={\small\ttfamily},backgroundcolor={\color{lightgray}}"
inline false
status open

\begin_layout Plain Layout

ghci HelloWorld.hs
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Si miramos el código generado, veremos que se generaron tres métodos por
 cada operation definida en el documento WSDL, además de los 
\emph on
datatypes
\emph default
 (records) correspondientes a los parámetros de entrada y salida.
 Por ejemplo, si en el documento WSDL definimos una operation llamada 
\begin_inset Quotes fld
\end_inset

sayHello
\begin_inset Quotes frd
\end_inset

, en el módulo generado veremos tres métodos: 
\begin_inset Quotes fld
\end_inset

sayHello
\begin_inset Quotes frd
\end_inset

, 
\begin_inset Quotes fld
\end_inset

sayHello'
\begin_inset Quotes frd
\end_inset

, y 
\begin_inset Quotes fld
\end_inset

buildOutput_sayHello
\begin_inset Quotes frd
\end_inset

.
 El que nos interesa es el que se llama igual a la operation, en este caso
 
\begin_inset Quotes fld
\end_inset

sayHello
\begin_inset Quotes frd
\end_inset

.
 Este método es el que consumirá el servicio web al ejecutarlo.
\end_layout

\begin_layout Subsection
Servicios web para testear
\end_layout

\begin_layout Standard
Para probar el programa se implementaron y deployaron dos servicios web.
 A continuación se presentan las URLs de sus documentos WSDL.
\end_layout

\begin_layout Itemize
Math: http://soapsamples.herokuapp.com/ws/math?wsdl
\end_layout

\begin_layout Itemize
Hello: http://soapsamples.herokuapp.com/ws/hello?wsdl
\end_layout

\begin_layout Standard
Por lo tanto, se pueden probar ambos servicios mediante:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash,basicstyle={\small\ttfamily},backgroundcolor={\color{lightgray}}"
inline false
status open

\begin_layout Plain Layout

./Main http://soapsamples.herokuapp.com/ws/math?wsdl
\end_layout

\end_inset


\end_layout

\begin_layout Standard
ó
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash,basicstyle={\small\ttfamily},backgroundcolor={\color{lightgray}}"
inline false
status open

\begin_layout Plain Layout

./Main http://soapsamples.herokuapp.com/ws/hello?wsdl
\end_layout

\end_inset


\end_layout

\begin_layout Section
Organización de los archivos
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{forest}
\end_layout

\begin_layout Plain Layout

  for tree={     font=
\backslash
ttfamily,     grow'=0,     child anchor=west,     parent anchor=south, 
    anchor=west,     calign=first,     edge path={       
\backslash
noexpand
\backslash
path [draw, 
\backslash
forestoption{edge}]       (!u.south west) +(7.5pt,0) |- node[fill,inner sep=1.25pt]
 {} (.child anchor)
\backslash
forestoption{edge label};     },     before typesetting nodes={       if
 n=1         {insert before={[,phantom]}}         {}     },     fit=band,
     before computing xy={l=15pt},   } 
\end_layout

\begin_layout Plain Layout

[ws-proxy-generator   
\end_layout

\begin_layout Plain Layout

	[src  [Callws.hs]  [Main.hs] 
\end_layout

\begin_layout Plain Layout

		[Common [Exception.hs] [Util.hs]]     
\end_layout

\begin_layout Plain Layout

		[Generator [DGraph.hs] [HaskellGen.hs] [StReader.hs] [TypeChecking.hs]]  
   
\end_layout

\begin_layout Plain Layout

		[Model [CodeWriting.hs] [HaskellTranslate.hs] [ProxyModel.hs] [WSDL2Model.hs]]
 
\end_layout

\begin_layout Plain Layout

		[Text [XML [WSDL [Parser.hs] [Types.hs]] ]]  ]  [doc] [test]  ]
\end_layout

\begin_layout Plain Layout


\backslash
end{forest} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A continuación, una breve descripción de los módulos, en el orden en el
 que aparecen en el diagrama.
\end_layout

\begin_layout Subsection
Callws
\end_layout

\begin_layout Standard
Módulo necesario e indispensable para la ejecución del código generado.
 Inspirado en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

.
 Se encarga de realizar la comunicación propiamente dicha con el servicio
 web: crea el mensaje XML, lo empaqueta en un mensaje HTTP, y envía el mensaje
 mediante un POST request de HTTP.
\end_layout

\begin_layout Subsection
Main
\end_layout

\begin_layout Standard
Main es el módulo principal del proyecto.
 Aquí se decide que instancia de MonadThrow se utilizará, así como también
 el lenguaje 
\emph on
target, 
\emph default
cuya representación deberá implementar las clases
\emph on
 
\emph default
CodeWriting y TranslateFromModel (ver siguiente sección)
\emph on
.
 
\emph default
En particular, el lenguaje 
\emph on
target
\emph default
 elegido es Haskell, y la instancia de MonadThrow es Either SomeException.
\end_layout

\begin_layout Subsection
Common.Exception
\end_layout

\begin_layout Standard
Define una instancia de Exception que se utilizará para el manejo de errores.
\end_layout

\begin_layout Subsection
Common.Util
\end_layout

\begin_layout Standard
Provee funciones útiles para el manejo de String.
\end_layout

\begin_layout Subsection
Generator.DGraph
\end_layout

\begin_layout Standard
Provee una implementación de grafos dirigidos junto a un método para realizar
 una ordenación topológica.
\end_layout

\begin_layout Subsection
Generator.HaskellGen
\end_layout

\begin_layout Standard
El módulo más importante relacionado con la generación de código.
 Es dependiente del lenguaje 
\emph on
target
\emph default
 elegido.
\end_layout

\begin_layout Subsection
Generator.StReader
\end_layout

\begin_layout Standard
Define una mónada, en la siguiente sección se explica con más detalle.
\end_layout

\begin_layout Subsection
Generator.TypeChecking
\end_layout

\begin_layout Standard
También es un módulo dependiente del lenguaje 
\emph on
target
\emph default
, en este caso, define expresiones a utilizar en las funciones generadas,
 y provee un chequeo de tipos.
\end_layout

\begin_layout Subsection
Model.CodeWriting
\end_layout

\begin_layout Standard
Define las clases CodeWriting y TranslateFromModel.
 En la siguiente sección se explican con más detalle.
\end_layout

\begin_layout Subsection
Model.HaskellTranslate
\end_layout

\begin_layout Standard
Módulo dependiente del lenguaje 
\emph on
target.
 
\emph default
Se encarga de realizar la traducción de modelo intermedio a una representación
 de código Haskell.
\end_layout

\begin_layout Subsection
Model.ProxyModel
\end_layout

\begin_layout Standard
Define un tipo de datos para representar el modelo intermedio (WSAbstraction).
\end_layout

\begin_layout Subsection
Model.WSDL2Model
\end_layout

\begin_layout Standard
Implementa la traducción de un documento WSDL ya parseado al modelo intermedio.
\end_layout

\begin_layout Subsection
Text.XML.WSDL.Parser
\end_layout

\begin_layout Standard
Implementa el parser de WSDL 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Text.XML.WSDL.Types
\end_layout

\begin_layout Standard
Define el tipo de datos WSDL, utilizado por el parser de WSDL 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Decisiones de diseño
\end_layout

\begin_layout Subsection
Etapas
\end_layout

\begin_layout Subsubsection
Parser para el WSDL
\end_layout

\begin_layout Standard
La implementación del parser del documento WSDL se hace, fundamentalmente,
 mediante la utilización de la mónada Conduit.
 Este tipo de datos provee facilidades para el manejo del flujo de datos.
 El módulo en el cual se implementa dicho parser es Text.XML.WSDL.Parser.
\end_layout

\begin_layout Subsubsection
Construcción del modelo intermedio (WSAbstraction)
\end_layout

\begin_layout Standard
Una vez parseado el documento WSDL, se procede a crear el modelo intermedio.
 En esta instancia, se chequea que el documento WSDL sea consistente, en
 el sentido de que los nombres referenciados desde distintos elementos del
 documento WSDL coincidan.
 El resultado es un modelo intermedio, el cual es una representación de
 las distintas abstracciones que define el documento WSDL, como lo son las
 interfaces (
\emph on
portType
\emph default
) y las funciones (
\emph on
operation
\emph default
).
 Este modelo es bastante similar al objeto obtenido en la etapa previa,
 excepto que aquí se realizan los chequeos mencionados anteriormente, y
 que el model obtenido ya está listo para ser traducido al lenguaje 
\emph on
target 
\emph default
en las etapas subsiguientes.
 Básicamente, se obtiene una representación independiente del lenguaje para
 el que se va a generar el código final.
 Esto permite desacoplar esta etapa de las siguientes, y minimizar los cambios
 si se quiere generar código para otro lenguaje.
 El módulo en el cual se implementa lo mencionado en esta subsección es
 Model.WSDL2Model.
\end_layout

\begin_layout Subsubsection
Traducción del modelo intermedio al lenguaje 
\emph on
target
\end_layout

\begin_layout Standard
Llamamos lenguaje 
\emph on
target
\emph default
 al lenguaje para el que se genera el código final.
 En nuestro caso, el lenguaje 
\emph on
target
\emph default
 es Haskell.
 En esta etapa se distinguen dos clases: CodeWriting y TranslateFromModel.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell,numbers=left,numberstyle={\scriptsize},basicstyle={\footnotesize\sffamily},breaklines=true,showstringspaces=false,tabsize=4,extendedchars=true,frame=tb"
inline false
status open

\begin_layout Plain Layout

class CodeWriting a where 
\end_layout

\begin_layout Plain Layout

	writeCode :: a -> IO ()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class TranslateFromModel t where 
\end_layout

\begin_layout Plain Layout

	buildFromModel :: WSAbstraction -> t 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Estas clases exigen que para el lenguaje 
\emph on
target
\emph default
 se implementen dos funciones: 
\end_layout

\begin_layout Itemize
writeCode: permite escribir código para el lenguaje generado en archivos.
\end_layout

\begin_layout Itemize
buildFromModel: implementa la traducción del modelo intermedio a (una abstracció
n de) lenguaje 
\emph on
target.
\end_layout

\begin_layout Standard
Específicamente para Haskell, se definen las siguientes abstracciones (más
 adelante se explica cómo se definen Expr y Type):
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell,numbers=left,numberstyle={\scriptsize},basicstyle={\footnotesize\sffamily},breaklines=true,showstringspaces=false,tabsize=4,extendedchars=true,frame=tb"
inline false
status open

\begin_layout Plain Layout

data DataType = DataType
\end_layout

\begin_layout Plain Layout

               { typeName :: String
\end_layout

\begin_layout Plain Layout

               , fields   :: [(String, Type)]
\end_layout

\begin_layout Plain Layout

               } deriving Show
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

data DefFun = DefFun
\end_layout

\begin_layout Plain Layout

            { funname       :: String
\end_layout

\begin_layout Plain Layout

            , funparameters :: [(String, Type)]
\end_layout

\begin_layout Plain Layout

            , body          :: Expr
\end_layout

\begin_layout Plain Layout

            , funcType      :: Type
\end_layout

\begin_layout Plain Layout

            } deriving Show
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

data Module = Module
\end_layout

\begin_layout Plain Layout

            { moduleName :: String
\end_layout

\begin_layout Plain Layout

            , functions  :: [(DefFun, DefFun)]
\end_layout

\begin_layout Plain Layout

            , dataTypes  :: [DataType]
\end_layout

\begin_layout Plain Layout

            } deriving Show  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
DataType permite definir records, mientras que DefFun se utiliza para definir
 funciones.
 Mediante buildFromModel, se traduce del código intermedio a una estructura
 formada a partir de DataType, DefFun y Module.
\end_layout

\begin_layout Standard
NOTA: cada Function definida en el modelo intermedio se traduce en dos DefFun
 (de ahí el tipo de functions en Module).
 Una función principal, que invoca a invokeWS, que es quien realiza la comunicac
ión propiamente dicha con el web service y que está definido en Callws.
 Y una función auxiliar para leer la respuesta obtenida (lista de Strings),
 y mapearla al record correspondiente.
 Luego en HaskellGen, en la generación de código, se genera "artificialmente"
 una tercera función que invoca al par.
\end_layout

\begin_layout Subsubsection
Expresiones y Tipado
\end_layout

\begin_layout Standard
En el módulo TypeChecking se define un AST para representar código Haskell.
 La gramática presenta limitaciones en cuanto al código que se puede generar
 pero tiene la suficiente expresividad para cumplir con los requerimientos
 de este proyecto.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell,numbers=left,numberstyle={\scriptsize},basicstyle={\footnotesize\sffamily},breaklines=true,showstringspaces=false,tabsize=4,extendedchars=true,frame=tb"
inline false
status open

\begin_layout Plain Layout

data Expr = Call String [Expr] 
\end_layout

\begin_layout Plain Layout

		  | Free String 
\end_layout

\begin_layout Plain Layout

		  | StringValue String 
\end_layout

\begin_layout Plain Layout

		  | ListValue [Expr] 
\end_layout

\begin_layout Plain Layout

		  | TupleValue (Expr,Expr) 
\end_layout

\begin_layout Plain Layout

		  | IntValue Int deriving Show
\end_layout

\end_inset


\end_layout

\begin_layout Standard
No se provee soporte para:
\end_layout

\begin_layout Itemize
definir funciones recursivas
\end_layout

\begin_layout Itemize
definir funciones mutuamente recursivas
\end_layout

\begin_layout Standard
Además, como puede verse, el AST no permite definir guardas ni estructuras
 condicionales
\end_layout

\begin_layout Standard
Adicionalmente, se define un chequeo de tipos.
 Para esto, introducimos Type.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell,numbers=left,numberstyle={\scriptsize},basicstyle={\footnotesize\sffamily},breaklines=true,showstringspaces=false,tabsize=4,extendedchars=true,frame=tb"
inline false
status open

\begin_layout Plain Layout

data Type = Func Type Type 
\end_layout

\begin_layout Plain Layout

		  | TList Type 
\end_layout

\begin_layout Plain Layout

		  | TTuple (Type, Type) 
\end_layout

\begin_layout Plain Layout

		  | IOMonad Type 
\end_layout

\begin_layout Plain Layout

		  | UserDefined String 
\end_layout

\begin_layout Plain Layout

		  | TInt 
\end_layout

\begin_layout Plain Layout

		  | TString 
\end_layout

\begin_layout Plain Layout

		  | TDouble 
\end_layout

\begin_layout Plain Layout

		  | TLong 
\end_layout

\begin_layout Plain Layout

		  | TChar 
\end_layout

\begin_layout Plain Layout

		  | TFloat 
\end_layout

\begin_layout Plain Layout

		  | TVoid 
\end_layout

\begin_layout Plain Layout

		  | TBool 
\end_layout

\begin_layout Plain Layout

		  deriving (Show)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como se puede ver, se definen tipos primitivos para los que no se pueden
 generar valores mediante Expr.
 Estos tipos primitivos se utilizan para mapear directamente los tipos primitivo
s que permite expresar el lenguaje WSDL.
 Las funciones generadas reciben records como parámetros, cuyos campos son
 valores de tipos primitivos.
 Durante esta etapa se utiliza la mónada StReader definida más adelante.
\end_layout

\begin_layout Subsubsection
Generación de código
\end_layout

\begin_layout Standard
Finalmente, tenemos la etapa de generación del código Haskell.
 Para esto, se implementa la función writeCode mencionada anteriormente.
 En esta implementación utilizamos el tipo de datos Doc 
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"
literal "false"

\end_inset

 para crear un 
\emph on
pretty printer
\emph default
.
\end_layout

\begin_layout Subsection
La mónada StReader
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Haskell,numbers=left,numberstyle={\scriptsize},basicstyle={\footnotesize\sffamily},breaklines=true,showstringspaces=false,tabsize=4,extendedchars=true,frame=tb"
inline false
status open

\begin_layout Plain Layout

data StReader m s e a = StReader {runStReader :: s -> e -> m (a,s)}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

instance MonadThrow m => Monad (StReader m s e) where
\end_layout

\begin_layout Plain Layout

    return x = StReader (
\backslash
s e -> return (x, s))     
\end_layout

\begin_layout Plain Layout

    StReader t >>= f = StReader (
\backslash
st e -> t st e >>= 
\backslash
(a, st') -> runStReader (f a) st' e) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La mónada StReader permite llevar un entorno de la misma forma que la mónada
 Reader, junto con un estado, como lo hace la mónada State.
 Además, permite el manejo de errores.
 Originalmente almacenaba un valor de tipo Maybe, pero luego se decidió
 generalizar mediante la mónada MonadThrow.
\end_layout

\begin_layout Standard
Esta mónada se utiliza durante la generación de código, tanto para el análisis
 sintáctico como para el chequeo de tipos.
 Al tipar una función, el estado se utiliza para llevar las funciones tipadas
 hasta el momento, mientras que en el entorno se almacenan los parámetros
 de la función junto a su tipo.
\end_layout

\begin_layout Subsection
DGraph y ordenamiento topológico
\end_layout

\begin_layout Standard
El módulo DGraph 
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"
literal "false"

\end_inset

 está pensado para ser utilizado durante la etapa de tipado.
 Las funciones que se pueden definir mediante el módulo HaskellGen pueden
 llamar a otras funciones definidas por el usuario.
 Durante el tipado, se lleva una lista (estado de la mónada StReader) con
 las funciones ya tipadas (junto a su tipo), añadiendo a esta lista una
 función cada vez que se procesa y determina el tipo de la misma.
 Por lo tanto, cada vez que se procesa una función, si en su cuerpo hay
 una llamada a otra función, es deseable que la función llamada ya esté
 tipada e incluida en la lista.
 
\end_layout

\begin_layout Standard
Para cumplir con este requerimiento, se decidió que se implemente un grafo
 dirigido acíclico cuyos nodos son las funciones definidas.
 Si en el cuerpo de una función f, aparece una llamada a una función g,
 en el grafo hay una arista de g a f.
 Dado que no se permiten funciones mutuamente recursivas nos asegura que
 el grafo no contendrá ciclos.
 Después de construir el grafo, se realiza un ordenamiento (
\emph on
sort
\emph default
) topológico de sus nodos.
 Esto no es más que un ordenamiento lineal de los nodos, tal que si existe
 una arista del nodo 
\emph on
u
\emph default
 al nodo 
\emph on
v, 
\emph default
el nodo 
\emph on
u
\emph default
 aparece antes que 
\emph on
v
\emph default
 en la lista ordenada.
 Luego, las funciones se van tipando en el orden en el que aparecen en dicha
 lista.
\end_layout

\begin_layout Section
Bibliografía
\end_layout

\begin_layout Standard
Este proyecto está inspirado fundamentalmente en 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

, el cual implementa un generador similar pero está desarrollado parte en
 Haskell y parte en C#.
 El módulo Callws fue copiado de este proyecto, aunque se le realizaron
 modificaciones.
\end_layout

\begin_layout Standard
El parser de WSDL fue obtenido de 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"
literal "false"

\end_inset

.
 Se actualizó la llamada a ciertos métodos ya deprecados, en favor de sus
 nuevas versiones.
 Además, se lo modificó para cumplir con nuevos requerimientos.
 Además inspiró el uso de MonadThrow en el resto del proyecto.
\end_layout

\begin_layout Standard
La implementación del grafo fue obtenida de 
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"
literal "false"

\end_inset

.
 Lo primordial en esta implementación era tener una forma de detectar ciclos.
\end_layout

\begin_layout Standard
El pretty printer utiliza 
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"
literal "false"

\end_inset

 para su implementación.
\end_layout

\begin_layout Standard
El diagrama de estructura de carpetas del presente informe fue copiado de
 
\begin_inset CommandInset citation
LatexCommand cite
key "key-53"
literal "false"

\end_inset

.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"
literal "false"

\end_inset

The HWSProxyGen Project.
 
\begin_inset CommandInset href
LatexCommand href
target "http://www.cin.ufpe.br/~haskell/hwsproxygen/"
literal "true"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"
literal "false"

\end_inset

wsdl: WSDL parsing in Haskell.
 
\begin_inset CommandInset href
LatexCommand href
target "http://hackage.haskell.org/package/wsdl-0.1.0.1"
literal "true"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

Detecting cycles of a graph(maybe directed or undirected) in Haskell.
 
\begin_inset CommandInset href
LatexCommand href
name "Respuesta en StackOverflow"
target "https://stackoverflow.com/a/8936096"
literal "true"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-4"

\end_inset

prettyprinter: A modern, easy to use, well-documented, extensible pretty-printer.
 
\begin_inset CommandInset href
LatexCommand href
target "http://hackage.haskell.org/package/prettyprinter"
literal "true"

\end_inset

 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-53"

\end_inset

Making a (simple) directory tree.
 
\begin_inset CommandInset href
LatexCommand href
target "https://tex.stackexchange.com/a/270761"
literal "true"

\end_inset


\end_layout

\end_body
\end_document
